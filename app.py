from flask import Flask, request, jsonify
import chess
import chess.engine
import os

app = Flask(__name__)

STOCKFISH_PATH = "stockfish\\stockfish-windows-x86-64-avx2.exe"

# Check if Stockfish exists
if not os.path.exists(STOCKFISH_PATH):
    print(f"Warning: Stockfish not found at {STOCKFISH_PATH}")
    print("Please install Stockfish and update the path in the script")

@app.route('/')
def index():
    # Serve the main HTML page
    with open('index.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/api/move', methods=['POST'])
def get_move():
    try:
        data = request.get_json()
        fen = data.get('fen')
        print(f"Received FEN: {fen}")  # Log the received FEN
        
        if not fen:
            return jsonify({'error': 'FEN position is required'}), 400
        
        # Set up the chess board with the given FEN
        board = chess.Board(fen)
        
        # Initialize Stockfish engine
        engine = chess.engine.SimpleEngine.popen_uci(STOCKFISH_PATH)
        
        # Set engine skill level (1-20, 20 being the strongest)
        engine.configure({"Skill Level": 0})
        
        # Get the best move with a time limit
        result = engine.play(board, chess.engine.Limit(time=1.0))
        best_move = result.move
        print(f"Stockfish move: {best_move}")  # Log the move generated by Stockfish
        
        if not board.is_legal(best_move):
            print(f"Invalid move generated by Stockfish: {best_move}")
            return jsonify({'error': 'Invalid move generated by Stockfish'}), 500
        
        # Close the engine
        engine.quit()
        
        # Convert the move to UCI format (e.g., "e2e4")
        move_uci = best_move.uci()
        print(f"Returning move to frontend: {move_uci}")  # Log the move being returned
        
        return jsonify({'move': move_uci})
    
    except Exception as e:
        print(f"Error in get_move: {e}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
